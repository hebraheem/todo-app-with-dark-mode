[{"/Users/aple/Desktop/project/simple-todo-darkmode/src/index.js":"1","/Users/aple/Desktop/project/simple-todo-darkmode/src/App.js":"2","/Users/aple/Desktop/project/simple-todo-darkmode/src/components/SearchField.js":"3","/Users/aple/Desktop/project/simple-todo-darkmode/src/components/Task.js":"4","/Users/aple/Desktop/project/simple-todo-darkmode/src/context.js":"5","/Users/aple/Desktop/project/simple-todo-darkmode/src/components/Alert.js":"6"},{"size":300,"mtime":1608349535000,"results":"7","hashOfConfig":"8"},{"size":540,"mtime":1608350387000,"results":"9","hashOfConfig":"8"},{"size":4011,"mtime":1608398639000,"results":"10","hashOfConfig":"8"},{"size":3156,"mtime":1608404775000,"results":"11","hashOfConfig":"8"},{"size":528,"mtime":1608350421000,"results":"12","hashOfConfig":"8"},{"size":397,"mtime":1608343888000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11cbev1",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/aple/Desktop/project/simple-todo-darkmode/src/index.js",[],"/Users/aple/Desktop/project/simple-todo-darkmode/src/App.js",[],"/Users/aple/Desktop/project/simple-todo-darkmode/src/components/SearchField.js",[],["28","29"],"/Users/aple/Desktop/project/simple-todo-darkmode/src/components/Task.js",["30","31"],"import React, { useState } from \"react\";\nimport \"../Task.css\";\nimport { useThemeContext } from \"../context\";\nimport { AiOutlineDelete } from \"react-icons/ai\";\nimport { FiEdit } from \"react-icons/fi\";\n\nconst audioTune = new Audio(\n'src/audio/8660_download_samsung_galaxy_s6_2_ringtone.mp3');\n\nconst Task = ({ tasks, removeItem, editItem }) => {\n  const [checked, setChecked] = useState(false);\n  const { isDark, styles } = useThemeContext();\n  // const [playInLoop, setPlayInLoop] = useS\n\n  const setAlertNot = (id) => {\n    let interval = setInterval(() => {\n      if (!interval) {\n        alert(\"Alert already set\");\n        clearInterval(interval);\n      } else {\n        tasks.map((task) => {\n          if (task.id === id) {\n            let countDownDate = task.value.toLocaleString();\n            let today = new Date();\n            let currentTime =\n              today.getHours() +\n              \":\" +\n              (today.getMinutes() < 10 ? \"0\" : \"\") +\n              today.getMinutes();\n            console.log(countDownDate);\n            console.log(currentTime);\n            alert(\"Alert set\");\n            if (currentTime === countDownDate) {\n              console.log(\"you made it\");\n              audioTune.load();\n              audioTune.play();\n              clearInterval(interval);\n              interval = false;\n            } else if (currentTime > countDownDate) {\n              alert(\"Task Expired\");\n              clearInterval(interval);\n            }\n          } \n        });\n      }\n    }, 1000);\n  };\n\n  return (\n    <div className=\"tasks\">\n      <h3 style={{ color: isDark ? styles.textColor : \"black\" }}>My Task</h3>\n      {tasks.map((task) => {\n        const { id, title, value } = task;\n        return (\n          <>\n            <div\n              className=\"task\"\n              key={id}\n              style={{\n                backgroundColor: isDark ? styles.backgroundColor : \"#C9AFA0\",\n              }}\n            >\n              <div className=\"alert\">\n                <p\n                  style={{ color: isDark ? styles.textColor : \"black\" }}\n                  onClick={() => setAlertNot(id)}\n                >\n                  set <br /> alert\n                </p>\n              </div>\n              <div className=\"task_text\">\n                <h4\n                  style={{\n                    color: isDark ? styles.textColor : \"black\",\n                    textDecorationLine: checked && \"line-through\",\n                  }}\n                >\n                  {title}\n                </h4>\n                <p style={{ color: isDark ? styles.textColor : \"grey\" }}>\n                  Due time: {value}\n                </p>\n              </div>\n              <div className=\"task_action\">\n                <button className=\"del_btn\" onClick={() => removeItem(id)}>\n                  <AiOutlineDelete />\n                </button>\n                <button className=\"edit_btn\" onClick={() => editItem(id)}>\n                  <FiEdit />\n                </button>\n              </div>\n            </div>\n            <div className=\"space\"></div>\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Task;\n","/Users/aple/Desktop/project/simple-todo-darkmode/src/context.js",[],"/Users/aple/Desktop/project/simple-todo-darkmode/src/components/Alert.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":11,"column":19,"nodeType":"38","messageId":"39","endLine":11,"endColumn":29},{"ruleId":"40","severity":1,"message":"41","line":21,"column":26,"nodeType":"42","messageId":"43","endLine":21,"endColumn":28},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'setChecked' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]